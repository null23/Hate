1.head!=null和head.next!=null的区别:
    举个例子：在遍历链表节点放入数组时，如果你的判断条件是head.next!=null
              数组元素的填充会在最后一个节点停止，也就是说最后一个节点不会加入数组的元素中

              head!=null会让节点遍历至最后一个节点之后的空节点，也就是null
              head.next!=null会让节点停留在最后一个节点

2.查找链表的一半的技巧
    设置两个节点，都从链表的头结点开始，一个节点每次增加两个，一个节点每次增加一个
    清楚判断条件即可
    Node node1 = head;
    Node node2 = head;
    while(node2.next != null && node2.next.next != null){
        node1 = node1.next;
        node2 = node2.next;
    }
    这里node2.next != null判断的是链表节点个数为偶数的时候
    node2.next.next != null判断的是链表节点个数为奇数的时候

--------------------------------------------------------------------------------------------------------------------------------
总结重点：
0.如何准确定位到链表的某个位置?
1.单链表/双向链表的建立，遍历
2.链表的逆序(延伸到在某种条件下，某几个连续节点的逆序)
3.某个节点的删除
4.如何定位到链表的某个指定位置，比如中间位置
5.链表的排序
6.链表与其他数据结构的结合：比如栈，队列，二叉树的中序遍历(把每个节点当做双向链表节点，中序遍历即排序结果)
7.两个链表同时比较(如何确定两个链表的分别的当前位置，以及这两个位置遍历到下一个节点的条件)